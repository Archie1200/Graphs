import java.util.ArrayList;
import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.PriorityQueue;
public class Algo {
    public static class WeightedNode implements Comparable<WeightedNode> {
        String name;
        ArrayList<WeightedNode> neighbours = new ArrayList<>();
        public HashMap<WeightedNode, Integer> weightMap = new HashMap<>();
        public boolean isVisited = false;
        public WeightedNode parent;
        public int distance;
        public int index;

        public WeightedNode(String name, int index) {
            this.name = name;
            this.index = index;
            this.distance = Integer.MAX_VALUE;
        }

        @Override
        public String toString() {
            return name;
        }

        @Override
        public int compareTo(WeightedNode o) {
            return this.distance - o.distance;
        }


    }


    public static class WeightedGraph {
        ArrayList<WeightedNode> nodeList = new ArrayList<>();

        public WeightedGraph(ArrayList<WeightedNode> nodeList) {
            this.nodeList = nodeList;
        }

        void dijkstra(WeightedNode node) {
            PriorityQueue<WeightedNode> queue = new PriorityQueue<>();
            node.distance = 0;
            queue.addAll(nodeList);
            while (!queue.isEmpty()) {
                WeightedNode currentNode = queue.remove();
                System.out.println(currentNode);
                for (WeightedNode neighbour : currentNode.neighbours) {
                    if (queue.contains(neighbour)) {
                        if (neighbour.distance > currentNode.distance + currentNode.weightMap.get(neighbour)) {
                            neighbour.distance = currentNode.distance + currentNode.weightMap.get(neighbour);
                            neighbour.parent = currentNode;
                            queue.remove(neighbour);
                            queue.add(neighbour);
                        }
                    }
                }
            }
            for (WeightedNode nodeToCheck : nodeList) {
                System.out.print("Node " + nodeToCheck + " distance : " + nodeToCheck.distance + " , path : ");
                pathPrint(nodeToCheck);
                System.out.println();
            }
        }

        public static void pathPrint(WeightedNode node) {
            if (node.parent != null) {
                pathPrint(node.parent);
            }
            System.out.print(node.name + " ");
        }

        public void addWeightedEdge(int i, int j, int d) {
            WeightedNode first = nodeList.get(i);
            WeightedNode second = nodeList.get(j);
            first.neighbours.add(second);
            first.weightMap.put(second, d);
        }


        //Bellman Ford Algorithm:
        public void bellmanFord(WeightedNode source) {
            source.distance = 0;
            for (int i = 0; i < nodeList.size(); i++) {
                for (WeightedNode currentNode : nodeList) {
                    for (WeightedNode neighbour : currentNode.neighbours) {
                        if (neighbour.distance > currentNode.distance + currentNode.weightMap.get(neighbour)) {
                            neighbour.distance = currentNode.distance + currentNode.weightMap.get(neighbour);
                            neighbour.parent = currentNode;
                        }
                    }
                }
            }
            System.out.println("checking for negative cycle");
            for (WeightedNode currentNode : nodeList) {
                for (WeightedNode neighbour : currentNode.neighbours) {
                    if (neighbour.distance > currentNode.distance + currentNode.weightMap.get(neighbour)) {
                        System.out.println("Negative cycle found : \n");
                        System.out.println("Vertex name : " + neighbour.name);
                        System.out.println("old cost : " + neighbour.distance);
                        int newDistance = currentNode.distance + currentNode.weightMap.get(neighbour);
                        System.out.println("new cost : " + newDistance);
                        return;
                    }
                }
            }
            System.out.println("negative cycle not found !!");

            for (WeightedNode nodeToCheck : nodeList) {
                System.out.print("Node " + nodeToCheck + " distance : " + nodeToCheck.distance + " , path : ");
                pathPrint(nodeToCheck);
                System.out.println();
            }
        }

    }
    public static void main(String[] args) {
        ArrayList<WeightedNode> nodeList = new ArrayList<>();
        nodeList.add(new WeightedNode("A", 0));
        nodeList.add(new WeightedNode("B", 1));
        nodeList.add(new WeightedNode("C", 2));
        nodeList.add(new WeightedNode("D", 3));
        nodeList.add(new WeightedNode("E", 4));
        nodeList.add(new WeightedNode("F", 5));
        nodeList.add(new WeightedNode("G", 6));

        WeightedGraph newGraph = new WeightedGraph(nodeList);
        newGraph.addWeightedEdge(0, 1, 2);
        newGraph.addWeightedEdge(0, 2, 5);
        newGraph.addWeightedEdge(1, 2, -6);
        newGraph.addWeightedEdge(1, 3, 1);
        newGraph.addWeightedEdge(1, 4, 3);
        newGraph.addWeightedEdge(2, 5, 8);
        newGraph.addWeightedEdge(3, 4, 2);
        newGraph.addWeightedEdge(4, 6, 9);
        newGraph.addWeightedEdge(5, 6, 7);

        System.out.print("printing dijkstra from source A : ");
        newGraph.dijkstra(nodeList.get(0));

        System.out.println();
        System.out.print("printing bellman ford from source A : ");
        newGraph.bellmanFord(nodeList.get(0));
    }

}
